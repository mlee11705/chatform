{"ast":null,"code":"'use strict';\n\nlet Promise = require('bluebird');\nlet path = require('path');\nlet child_process = Promise.promisifyAll(require('child_process'));\nconst PYTHON_BRIDGE_SCRIPT = path.join(__dirname, 'node_python_bridge.py');\nfunction pythonBridge(opts) {\n  // default options\n  let intepreter = opts && opts.python || 'python';\n  let stdio = opts && opts.stdio || ['pipe', process.stdout, process.stderr];\n  let options = {\n    cwd: opts && opts.cwd,\n    env: opts && opts.env,\n    uid: opts && opts.uid,\n    gid: opts && opts.gid,\n    stdio: stdio.concat(['ipc'])\n  };\n\n  // create process bridge\n  let ps = child_process.spawn(intepreter, [PYTHON_BRIDGE_SCRIPT], options);\n  let queue = singleQueue();\n  function sendPythonCommand(type, enqueue, self) {\n    function wrapper() {\n      self = self || wrapper;\n      let code = json.apply(this, arguments);\n      if (!(this && this.connected || self.connected)) {\n        return Promise.reject(new PythonBridgeNotConnected());\n      }\n      return enqueue(() => new Promise((resolve, reject) => {\n        ps.send({\n          type: type,\n          code: code\n        });\n        ps.once('message', onMessage);\n        ps.once('close', onClose);\n        function onMessage(data) {\n          ps.removeListener('close', onClose);\n          if (data && data.type && data.type === 'success') {\n            resolve(eval(`(${data.value})`));\n          } else if (data && data.type && data.type === 'exception') {\n            reject(new PythonException(data.value));\n          } else {\n            reject(data);\n          }\n        }\n        function onClose(exit_code, message) {\n          ps.removeListener('message', onMessage);\n          if (!message) {\n            reject(new Error(`Python process closed with exit code ${exit_code}`));\n          } else {\n            reject(new Error(`Python process closed with exit code ${exit_code} and message: ${message}`));\n          }\n        }\n      }));\n    }\n    return wrapper;\n  }\n  function setupLock(enqueue) {\n    return f => {\n      return enqueue(() => {\n        let lock_queue = singleQueue();\n        let lock_python = sendPythonCommand('evaluate', lock_queue);\n        lock_python.ex = sendPythonCommand('execute', lock_queue, lock_python);\n        lock_python.lock = setupLock(lock_queue);\n        lock_python.connected = true;\n        lock_python.__proto__ = python;\n        return f(lock_python);\n      });\n    };\n  }\n\n  // API\n  let python = sendPythonCommand('evaluate', queue);\n  python.ex = sendPythonCommand('execute', queue, python);\n  python.lock = setupLock(queue);\n  python.pid = ps.pid;\n  python.connected = true;\n  python.Exception = PythonException;\n  python.isException = isPythonException;\n  python.disconnect = () => {\n    python.connected = false;\n    return queue(() => {\n      ps.disconnect();\n    });\n  };\n  python.end = python.disconnect;\n  python.kill = signal => {\n    python.connected = false;\n    ps.kill(signal);\n  };\n  python.stdin = ps.stdin;\n  python.stdout = ps.stdout;\n  python.stderr = ps.stderr;\n  return python;\n}\nclass PythonException extends Error {\n  constructor(exc) {\n    if (exc && exc.format) {\n      super(exc.format.join(''));\n    } else if (exc && exc.error) {\n      super(`Python exception: ${exc.error}`);\n    } else {\n      super('Unknown Python exception');\n    }\n    this.error = exc.error;\n    this.exception = exc.exception;\n    this.traceback = exc.traceback;\n    this.format = exc.format;\n  }\n}\nclass PythonBridgeNotConnected extends Error {\n  constructor() {\n    super('Python bridge is no longer connected.');\n  }\n}\nfunction isPythonException(name, exc) {\n  const thunk = exc => exc instanceof PythonException && exc.exception && exc.exception.type.name === name;\n  if (exc === undefined) {\n    return thunk;\n  }\n  return thunk(exc);\n}\nfunction singleQueue() {\n  let last = Promise.resolve();\n  return function enqueue(f) {\n    let wait = last;\n    let done;\n    last = new Promise(resolve => {\n      done = resolve;\n    });\n    return new Promise((resolve, reject) => {\n      wait.finally(() => {\n        Promise.try(f).then(resolve, reject);\n      });\n    }).finally(() => done());\n  };\n}\nfunction dedent(code) {\n  // dedent text\n  let lines = code.split('\\n');\n  let offset = null;\n\n  // remove extra blank starting line\n  if (!lines[0].trim()) {\n    lines.shift();\n  }\n  for (let line of lines) {\n    let trimmed = line.trimLeft();\n    if (trimmed) {\n      offset = line.length - trimmed.length + 1;\n      break;\n    }\n  }\n  if (!offset) {\n    return code;\n  }\n  let match = new RegExp('^' + new Array(offset).join('\\\\s?'));\n  return lines.map(line => line.replace(match, '')).join('\\n');\n}\nfunction json(text_nodes) {\n  let values = Array.prototype.slice.call(arguments, 1);\n  return dedent(text_nodes.reduce((cur, acc, i) => {\n    return cur + serializePython(values[i - 1]) + acc;\n  }));\n}\nfunction serializePython(value) {\n  if (value === null || typeof value === 'undefined') {\n    return 'None';\n  } else if (value === true) {\n    return 'True';\n  } else if (value === false) {\n    return 'False';\n  } else if (value === Infinity) {\n    return \"float('inf')\";\n  } else if (value === -Infinity) {\n    return \"float('-inf')\";\n  } else if (value instanceof Array) {\n    return `[${value.map(serializePython).join(', ')}]`;\n  } else if (typeof value === 'number') {\n    if (isNaN(value)) {\n      return \"float('nan')\";\n    }\n    return JSON.stringify(value);\n  } else if (typeof value === 'string') {\n    return JSON.stringify(value);\n  } else if (value instanceof Map) {\n    const props = Array.from(value.entries()).map(kv => `${serializePython(kv[0])}: ${serializePython(kv[1])}`);\n    return `{${props.join(', ')}}`;\n  } else {\n    const props = Object.keys(value).map(k => `${serializePython(k)}: ${serializePython(value[k])}`);\n    return `{${props.join(', ')}}`;\n  }\n}\npythonBridge.pythonBridge = pythonBridge;\npythonBridge.PythonException = PythonException;\npythonBridge.PythonBridgeNotConnected = PythonBridgeNotConnected;\npythonBridge.isPythonException = isPythonException;\npythonBridge.json = json;\npythonBridge.serializePython = serializePython;\nmodule.exports = pythonBridge.pythonBridge = pythonBridge;","map":{"version":3,"names":["Promise","require","path","child_process","promisifyAll","PYTHON_BRIDGE_SCRIPT","join","__dirname","pythonBridge","opts","intepreter","python","stdio","process","stdout","stderr","options","cwd","env","uid","gid","concat","ps","spawn","queue","singleQueue","sendPythonCommand","type","enqueue","self","wrapper","code","json","apply","arguments","connected","reject","PythonBridgeNotConnected","resolve","send","once","onMessage","onClose","data","removeListener","eval","value","PythonException","exit_code","message","Error","setupLock","f","lock_queue","lock_python","ex","lock","__proto__","pid","Exception","isException","isPythonException","disconnect","end","kill","signal","stdin","constructor","exc","format","error","exception","traceback","name","thunk","undefined","last","wait","done","finally","try","then","dedent","lines","split","offset","trim","shift","line","trimmed","trimLeft","length","match","RegExp","Array","map","replace","text_nodes","values","prototype","slice","call","reduce","cur","acc","i","serializePython","Infinity","isNaN","JSON","stringify","Map","props","from","entries","kv","Object","keys","k","module","exports"],"sources":["/Users/mike/Projects/react-conversational-form-example-bgnaje/node_modules/python-bridge/index.js"],"sourcesContent":["'use strict';\n\nlet Promise = require('bluebird');\nlet path = require('path');\nlet child_process = Promise.promisifyAll(require('child_process'));\n\nconst PYTHON_BRIDGE_SCRIPT = path.join(__dirname, 'node_python_bridge.py');\n\nfunction pythonBridge(opts) {\n    // default options\n    let intepreter = opts && opts.python || 'python';\n    let stdio = opts && opts.stdio || ['pipe', process.stdout, process.stderr];\n    let options = {\n        cwd: opts && opts.cwd,\n        env: opts && opts.env,\n        uid: opts && opts.uid,\n        gid: opts && opts.gid,\n        stdio: stdio.concat(['ipc'])\n    };\n\n    // create process bridge\n    let ps = child_process.spawn(intepreter, [PYTHON_BRIDGE_SCRIPT], options);\n    let queue = singleQueue();\n\n    function sendPythonCommand(type, enqueue, self) {\n        function wrapper() {\n            self = self || wrapper;\n            let code = json.apply(this, arguments);\n\n            if (!(this && this.connected || self.connected)) {\n                return Promise.reject(new PythonBridgeNotConnected());\n            }\n\n            return enqueue(() => new Promise((resolve, reject) => {\n                ps.send({type: type, code: code});\n                ps.once('message', onMessage);\n                ps.once('close', onClose);\n\n                function onMessage(data) {\n                    ps.removeListener('close', onClose);\n                    if (data && data.type && data.type === 'success') {\n                        resolve(eval(`(${data.value})`));\n                    } else if (data && data.type && data.type === 'exception') {\n                        reject(new PythonException(data.value));\n                    } else {\n                        reject(data);\n                    }\n                }\n\n                function onClose(exit_code, message) {\n                    ps.removeListener('message', onMessage);\n                    if (!message) {\n                        reject(new Error(`Python process closed with exit code ${exit_code}`));\n                    } else {\n                        reject(new Error(`Python process closed with exit code ${exit_code} and message: ${message}`));\n                    }\n                }\n            }));\n        }\n        return wrapper;\n    }\n\n    function setupLock(enqueue) {\n        return f => {\n            return enqueue(() => {\n                let lock_queue = singleQueue();\n                let lock_python = sendPythonCommand('evaluate', lock_queue);\n                lock_python.ex = sendPythonCommand('execute', lock_queue, lock_python);\n                lock_python.lock = setupLock(lock_queue);\n                lock_python.connected = true;\n                lock_python.__proto__ = python;\n\n                return f(lock_python);\n            });\n        };\n    }\n\n    // API\n    let python = sendPythonCommand('evaluate', queue);\n    python.ex = sendPythonCommand('execute', queue, python);\n    python.lock = setupLock(queue);\n    python.pid = ps.pid;\n    python.connected = true;\n    python.Exception = PythonException;\n    python.isException = isPythonException;\n    python.disconnect = () => {\n        python.connected = false;\n        return queue(() => {\n            ps.disconnect();\n        });\n    };\n    python.end = python.disconnect;\n    python.kill = signal => {\n        python.connected = false;\n        ps.kill(signal);\n    };\n    python.stdin = ps.stdin;\n    python.stdout = ps.stdout;\n    python.stderr = ps.stderr;\n    return python;\n}\n\nclass PythonException extends Error {\n    constructor(exc) {\n        if (exc && exc.format) {\n            super(exc.format.join(''));\n        } else if (exc && exc.error) {\n            super(`Python exception: ${exc.error}`);\n        } else {\n            super('Unknown Python exception');\n        }\n        this.error = exc.error;\n        this.exception = exc.exception;\n        this.traceback = exc.traceback;\n        this.format = exc.format;\n    }\n}\n\nclass PythonBridgeNotConnected extends Error {\n    constructor() {\n        super('Python bridge is no longer connected.');\n    }\n}\n\nfunction isPythonException(name, exc) {\n    const thunk = exc => (\n        exc instanceof PythonException &&\n        exc.exception &&\n        exc.exception.type.name === name\n    );\n    if (exc === undefined) {\n        return thunk;\n    }\n    return thunk(exc);\n}\n\nfunction singleQueue() {\n    let last = Promise.resolve();\n    return function enqueue(f) {\n        let wait = last;\n        let done;\n        last = new Promise(resolve => {\n            done = resolve;\n        });\n        return new Promise((resolve, reject) => {\n            wait.finally(() => {\n                Promise.try(f).then(resolve, reject);\n            });\n        }).finally(() => done());\n    };\n}\n\nfunction dedent(code) {\n    // dedent text\n    let lines = code.split('\\n');\n    let offset = null;\n\n    // remove extra blank starting line\n    if (!lines[0].trim()) {\n        lines.shift();\n    }\n    for (let line of lines) {\n        let trimmed = line.trimLeft();\n        if (trimmed) {\n            offset = (line.length - trimmed.length) + 1;\n            break;\n        }\n    }\n    if (!offset) {\n        return code;\n    }\n    let match = new RegExp('^' + new Array(offset).join('\\\\s?'));\n    return lines.map(line => line.replace(match, '')).join('\\n');\n}\n\nfunction json(text_nodes) {\n    let values = Array.prototype.slice.call(arguments, 1);\n    return dedent(text_nodes.reduce((cur, acc, i) => {\n        return cur + serializePython(values[i - 1]) + acc;\n    }));\n}\n\nfunction serializePython(value) {\n    if (value === null || typeof value === 'undefined') {\n        return 'None';\n    } else if (value === true) {\n        return 'True';\n    } else if (value === false) {\n        return 'False';\n    } else if (value === Infinity) {\n        return \"float('inf')\";\n    } else if (value === -Infinity) {\n        return \"float('-inf')\";\n    } else if (value instanceof Array) {\n        return `[${value.map(serializePython).join(', ')}]`;\n    } else if (typeof value === 'number') {\n        if (isNaN(value)) {\n            return \"float('nan')\";\n        }\n        return JSON.stringify(value);\n    } else if (typeof value === 'string') {\n        return JSON.stringify(value);\n    } else if (value instanceof Map) {\n        const props = Array.from(value.entries()).map(kv => `${serializePython(kv[0])}: ${serializePython(kv[1])}`);\n        return `{${props.join(', ')}}`;\n    } else {\n        const props = Object.keys(value).map(k => `${serializePython(k)}: ${serializePython(value[k])}`);\n        return `{${props.join(', ')}}`;\n    }\n}\n\npythonBridge.pythonBridge = pythonBridge;\npythonBridge.PythonException = PythonException;\npythonBridge.PythonBridgeNotConnected = PythonBridgeNotConnected;\npythonBridge.isPythonException = isPythonException;\npythonBridge.json = json;\npythonBridge.serializePython = serializePython;\n\nmodule.exports = pythonBridge.pythonBridge = pythonBridge;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}