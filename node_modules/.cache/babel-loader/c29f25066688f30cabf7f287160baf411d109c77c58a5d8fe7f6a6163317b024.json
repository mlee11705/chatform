{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PythonShell = exports.NewlineTransformer = exports.PythonShellError = void 0;\nconst events_1 = require(\"events\");\nconst child_process_1 = require(\"child_process\");\nconst os_1 = require(\"os\");\nconst path_1 = require(\"path\");\nconst stream_1 = require(\"stream\");\nconst fs_1 = require(\"fs\");\nconst util_1 = require(\"util\");\nfunction toArray(source) {\n  if (typeof source === 'undefined' || source === null) {\n    return [];\n  } else if (!Array.isArray(source)) {\n    return [source];\n  }\n  return source;\n}\n/**\r\n * adds arguments as properties to obj\r\n */\nfunction extend(obj) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  Array.prototype.slice.call(arguments, 1).forEach(function (source) {\n    if (source) {\n      for (let key in source) {\n        obj[key] = source[key];\n      }\n    }\n  });\n  return obj;\n}\n/**\r\n * gets a random int from 0-10000000000\r\n */\nfunction getRandomInt() {\n  return Math.floor(Math.random() * 10000000000);\n}\nconst execPromise = (0, util_1.promisify)(child_process_1.exec);\nclass PythonShellError extends Error {}\nexports.PythonShellError = PythonShellError;\n/**\r\n * Takes in a string stream and emits batches seperated by newlines\r\n */\nclass NewlineTransformer extends stream_1.Transform {\n  _transform(chunk, encoding, callback) {\n    let data = chunk.toString();\n    if (this._lastLineData) data = this._lastLineData + data;\n    const lines = data.split(os_1.EOL);\n    this._lastLineData = lines.pop();\n    //@ts-ignore this works, node ignores the encoding if it's a number\n    lines.forEach(this.push.bind(this));\n    callback();\n  }\n  _flush(done) {\n    if (this._lastLineData) this.push(this._lastLineData);\n    this._lastLineData = null;\n    done();\n  }\n}\nexports.NewlineTransformer = NewlineTransformer;\n/**\r\n * An interactive Python shell exchanging data through stdio\r\n * @param {string} script    The python script to execute\r\n * @param {object} [options] The launch options (also passed to child_process.spawn)\r\n * @param [stdoutSplitter] Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n * @param [stderrSplitter] Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n * @constructor\r\n */\nclass PythonShell extends events_1.EventEmitter {\n  /**\r\n   * spawns a python process\r\n   * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified\r\n   * @param options\r\n   * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n   * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n   */\n  constructor(scriptPath, options) {\n    let stdoutSplitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let stderrSplitter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    super();\n    /**\r\n     * returns either pythonshell func (if val string) or custom func (if val Function)\r\n     */\n    function resolve(type, val) {\n      if (typeof val === 'string') {\n        // use a built-in function using its name\n        return PythonShell[type][val];\n      } else if (typeof val === 'function') {\n        // use a custom function\n        return val;\n      }\n    }\n    if (scriptPath.trim().length == 0) throw Error(\"scriptPath cannot be empty! You must give a script for python to run\");\n    let self = this;\n    let errorData = '';\n    events_1.EventEmitter.call(this);\n    options = extend({}, PythonShell.defaultOptions, options);\n    let pythonPath;\n    if (!options.pythonPath) {\n      pythonPath = PythonShell.defaultPythonPath;\n    } else pythonPath = options.pythonPath;\n    let pythonOptions = toArray(options.pythonOptions);\n    let scriptArgs = toArray(options.args);\n    this.scriptPath = (0, path_1.join)(options.scriptPath || '', scriptPath);\n    this.command = pythonOptions.concat(this.scriptPath, scriptArgs);\n    this.mode = options.mode || 'text';\n    this.formatter = resolve('format', options.formatter || this.mode);\n    this.parser = resolve('parse', options.parser || this.mode);\n    // We don't expect users to ever format stderr as JSON so we default to text mode\n    this.stderrParser = resolve('parse', options.stderrParser || 'text');\n    this.terminated = false;\n    this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);\n    ['stdout', 'stdin', 'stderr'].forEach(function (name) {\n      self[name] = self.childProcess[name];\n      self.parser && self[name] && self[name].setEncoding(options.encoding || 'utf8');\n    });\n    // Node buffers stdout&stderr in batches regardless of newline placement\n    // This is troublesome if you want to recieve distinct individual messages\n    // for example JSON parsing breaks if it recieves partial JSON\n    // so we use newlineTransformer to emit each batch seperated by newline\n    if (this.parser && this.stdout) {\n      if (!stdoutSplitter) stdoutSplitter = new NewlineTransformer();\n      // note that setting the encoding turns the chunk into a string\n      stdoutSplitter.setEncoding(options.encoding || 'utf8');\n      this.stdout.pipe(stdoutSplitter).on('data', chunk => {\n        this.emit('message', self.parser(chunk));\n      });\n    }\n    // listen to stderr and emit errors for incoming data\n    if (this.stderrParser && this.stderr) {\n      if (!stderrSplitter) stderrSplitter = new NewlineTransformer();\n      // note that setting the encoding turns the chunk into a string\n      stderrSplitter.setEncoding(options.encoding || 'utf8');\n      this.stderr.pipe(stderrSplitter).on('data', chunk => {\n        this.emit('stderr', self.stderrParser(chunk));\n      });\n    }\n    if (this.stderr) {\n      this.stderr.on('data', function (data) {\n        errorData += '' + data;\n      });\n      this.stderr.on('end', function () {\n        self.stderrHasEnded = true;\n        terminateIfNeeded();\n      });\n    } else {\n      self.stderrHasEnded = true;\n    }\n    if (this.stdout) {\n      this.stdout.on('end', function () {\n        self.stdoutHasEnded = true;\n        terminateIfNeeded();\n      });\n    } else {\n      self.stdoutHasEnded = true;\n    }\n    this.childProcess.on('error', function (err) {\n      self.emit('error', err);\n    });\n    this.childProcess.on('exit', function (code, signal) {\n      self.exitCode = code;\n      self.exitSignal = signal;\n      terminateIfNeeded();\n    });\n    function terminateIfNeeded() {\n      if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null) return;\n      let err;\n      if (self.exitCode && self.exitCode !== 0) {\n        if (errorData) {\n          err = self.parseError(errorData);\n        } else {\n          err = new PythonShellError('process exited with code ' + self.exitCode);\n        }\n        err = extend(err, {\n          executable: pythonPath,\n          options: pythonOptions.length ? pythonOptions : null,\n          script: self.scriptPath,\n          args: scriptArgs.length ? scriptArgs : null,\n          exitCode: self.exitCode\n        });\n        // do not emit error if only a callback is used\n        if (self.listeners('pythonError').length || !self._endCallback) {\n          self.emit('pythonError', err);\n        }\n      }\n      self.terminated = true;\n      self.emit('close');\n      self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);\n    }\n    ;\n  }\n  /**\r\n   * checks syntax without executing code\r\n   * @returns rejects promise w/ string error output if syntax failure\r\n   */\n  static checkSyntax(code) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const randomInt = getRandomInt();\n      const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;\n      const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);\n      return writeFilePromise(filePath, code).then(() => {\n        return this.checkSyntaxFile(filePath);\n      });\n    });\n  }\n  static getPythonPath() {\n    return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;\n  }\n  /**\r\n   * checks syntax without executing code\r\n   * @returns {Promise} rejects w/ stderr if syntax failure\r\n   */\n  static checkSyntaxFile(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pythonPath = this.getPythonPath();\n      let compileCommand = `${pythonPath} -m py_compile ${filePath}`;\n      return execPromise(compileCommand);\n    });\n  }\n  /**\r\n   * Runs a Python script and returns collected messages\r\n   * @param  {string}   scriptPath   The path to the script to execute\r\n   * @param  {Options}   options  The execution options\r\n   * @param  {Function} callback The callback function to invoke with the script results\r\n   * @return {PythonShell}       The PythonShell instance\r\n   */\n  static run(scriptPath, options, callback) {\n    let pyshell = new PythonShell(scriptPath, options);\n    let output = [];\n    return pyshell.on('message', function (message) {\n      output.push(message);\n    }).end(function (err) {\n      return callback(err ? err : null, output.length ? output : null);\n    });\n  }\n  /**\r\n   * Runs the inputted string of python code and returns collected messages. DO NOT ALLOW UNTRUSTED USER INPUT HERE!\r\n   * @param  {string}   code   The python code to execute\r\n   * @param  {Options}   options  The execution options\r\n   * @param  {Function} callback The callback function to invoke with the script results\r\n   * @return {PythonShell}       The PythonShell instance\r\n   */\n  static runString(code, options, callback) {\n    // put code in temp file\n    const randomInt = getRandomInt();\n    const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;\n    (0, fs_1.writeFileSync)(filePath, code);\n    return PythonShell.run(filePath, options, callback);\n  }\n  static getVersion(pythonPath) {\n    if (!pythonPath) pythonPath = this.getPythonPath();\n    return execPromise(pythonPath + \" --version\");\n  }\n  static getVersionSync(pythonPath) {\n    if (!pythonPath) pythonPath = this.getPythonPath();\n    return (0, child_process_1.execSync)(pythonPath + \" --version\").toString();\n  }\n  /**\r\n   * Parses an error thrown from the Python process through stderr\r\n   * @param  {string|Buffer} data The stderr contents to parse\r\n   * @return {Error} The parsed error with extended stack trace when traceback is available\r\n   */\n  parseError(data) {\n    let text = '' + data;\n    let error;\n    if (/^Traceback/.test(text)) {\n      // traceback data is available\n      let lines = text.trim().split(os_1.EOL);\n      let exception = lines.pop();\n      error = new PythonShellError(exception);\n      error.traceback = data;\n      // extend stack trace\n      error.stack += os_1.EOL + '    ----- Python Traceback -----' + os_1.EOL + '  ';\n      error.stack += lines.slice(1).join(os_1.EOL + '  ');\n    } else {\n      // otherwise, create a simpler error with stderr contents\n      error = new PythonShellError(text);\n    }\n    return error;\n  }\n  /**\r\n   * Sends a message to the Python shell through stdin\r\n   * Override this method to format data to be sent to the Python process\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  send(message) {\n    if (!this.stdin) throw new Error(\"stdin not open for writing\");\n    let data = this.formatter ? this.formatter(message) : message;\n    if (this.mode !== 'binary') data += os_1.EOL;\n    this.stdin.write(data);\n    return this;\n  }\n  /**\r\n   * Closes the stdin stream. Unless python is listening for stdin in a loop\r\n   * this should cause the process to finish its work and close.\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  end(callback) {\n    if (this.childProcess.stdin) {\n      this.childProcess.stdin.end();\n    }\n    this._endCallback = callback;\n    return this;\n  }\n  /**\r\n   * Sends a kill signal to the process\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  kill(signal) {\n    this.terminated = this.childProcess.kill(signal);\n    return this;\n  }\n  /**\r\n   * Alias for kill.\r\n   * @deprecated\r\n   */\n  terminate(signal) {\n    // todo: remove this next breaking release\n    return this.kill(signal);\n  }\n}\nexports.PythonShell = PythonShell;\n// starting 2020 python2 is deprecated so we choose 3 as default\nPythonShell.defaultPythonPath = process.platform != \"win32\" ? \"python3\" : \"python\";\nPythonShell.defaultOptions = {}; //allow global overrides for options\n// built-in formatters\nPythonShell.format = {\n  text: function toText(data) {\n    if (!data) return '';else if (typeof data !== 'string') return data.toString();\n    return data;\n  },\n  json: function toJson(data) {\n    return JSON.stringify(data);\n  }\n};\n//built-in parsers\nPythonShell.parse = {\n  text: function asText(data) {\n    return data;\n  },\n  json: function asJson(data) {\n    return JSON.parse(data);\n  }\n};\n;","map":{"version":3,"mappings":"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","names":["toArray","source","Array","isArray","extend","obj","args","prototype","slice","call","arguments","forEach","key","getRandomInt","Math","floor","random","execPromise","child_process_1","PythonShellError","Error","exports","NewlineTransformer","stream_1","_transform","chunk","encoding","callback","data","toString","_lastLineData","lines","split","os_1","pop","push","bind","_flush","done","PythonShell","events_1","constructor","scriptPath","options","stdoutSplitter","stderrSplitter","resolve","type","val","trim","length","self","errorData","defaultOptions","pythonPath","defaultPythonPath","pythonOptions","scriptArgs","command","concat","mode","formatter","parser","stderrParser","terminated","childProcess","name","setEncoding","stdout","pipe","on","emit","stderr","stderrHasEnded","terminateIfNeeded","stdoutHasEnded","err","code","signal","exitCode","exitSignal","parseError","executable","script","listeners","_endCallback","checkSyntax","randomInt","filePath","path_1","writeFilePromise","fs_1","then","checkSyntaxFile","getPythonPath","compileCommand","run","pyshell","output","message","end","runString","getVersion","getVersionSync","text","error","test","exception","traceback","stack","join","send","stdin","write","kill","terminate","process","platform","toText","json","toJson","JSON","stringify","asText","asJson","parse"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}